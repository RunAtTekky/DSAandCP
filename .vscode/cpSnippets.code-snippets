{
	"My very basic CP Template": {
	"prefix": "runat",
	"body": [
		"#include <bits/stdc++.h>",
		"using namespace std;",
		"",
		"typedef long long ll;",
		"",
		"void solve() {",
		"    ll n; cin >> n;",
		"}",
		"",
		"int main() {",
		"ios_base::sync_with_stdio(false); cin.tie(NULL);",
		"    int t=1; cin >> t;",
		"    while (t--) solve();",
		"}",
		""
	],
	"description": "My very basic CP Template"
	},

	"Define yes and no": {
	"prefix": "yesno",
	"body": [
		"#define YES cout << \"YES\\n\"",
		"#define NO cout << \"NO\\n\"  "
	],
	"description": "Define yes and no"
	},

	"Take vector input": {
	"prefix": "vecin",
	"body": [
		"vector<int> ${1:vec}(${2:size});",
		"for (auto &${3:ele} : ${1:vec}) cin >> ${3:ele};",
		""
	],
	"description": "Take vector input"
	},

	"Vector Output": {
	"prefix": "vecout",
	"body": [
		"for (auto &${1:ele} : ${2:vec}) cout << ${1:ele} << \" \";",
		"cout << \"\\n\";",
		"\n"
	],
	"description": "Vector Output"
	},

	"Simple macro for debugging": {
	"prefix": "debug",
	"body": [
		"#define debug(x) cerr << #x << ' ' << x << '\\n';"
	],
	"description": "Simple macro for debugging"
	}

	// Place your DSA workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
}